import inspect
import json
from pathlib import Path
from typing import Tuple

import wandb
from torch import nn
from torch.utils.data import DataLoader

from src.constants import DEVICE, WANDB_ENTITY
from src.data.datahandler import get_datahandler_class
from src.experiments.registry import import_files_from
from src.models.utils import get_model_class
from src.train.train import train
from src.train.utils import DEFAULT_TRAIN_CONFIG

# For Registry to work correctly, we need to first import all implementations
# If you don't want to import everything, comment it out and only import the models / datahandlers you're using
import_files_from("models")
import_files_from("data")

PARAM_TO_FILL = "<FILL_ME>"


def run_config(config: dict, save_path: Path, experiment_name: str, name: str, log_wandb: bool = False):
    # runs the given config: trains a model and saves the results
    print(f"Running experiment {experiment_name}, model {name}\nResults will be saved to {save_path}\n")
    print(json.dumps(config, indent=4))

    wandb_run = None
    if log_wandb:
        wandb_run = wandb.init(entity=WANDB_ENTITY, reinit=True, config=config, project=experiment_name, name=name)

    model = get_model(config)
    train_dataloader, val_dataloader = get_dataloaders(config)

    train(config, model, train_dataloader, val_dataloader, save_path, name, wandb_run=wandb_run)

    if wandb_run:
        wandb_run.finish()


def get_model(config: dict) -> nn.Module:
    # loads a model by name from the config file
    # Todo: add loading from pretrained
    model_name = config["model"]["name"]
    model_params = config["model"]["params"]
    return get_model_class(model_name)(**model_params).to(DEVICE)


def get_dataloaders(config: dict) -> Tuple[DataLoader, DataLoader]:
    # loads train/val dataloaders by name from the config file
    # Todo: make the datasets the same format?
    dataset_name = config["dataset"]["name"]
    dataset_params = config["dataset"]["params"]
    datahander = get_datahandler_class(dataset_name)(**dataset_params)
    return datahander.get_train_val_dataloaders()


def generate_config(model, dataset, var_name="cur_config") -> dict:
    # A helper function to generate a config for the given model and datahandler, with some parameters to be filled in.
    # Just copy the output, paste it wherever and fill the parameters, it should be enough to successfully load
    # the model and the datahandler with the given parameters.
    # The training config's structure is [DEFAULT_TRAIN_CONFIG]
    config = {
        "model": {
            "name": model,
            "params": get_params(get_model_class(model))
        },
        "dataset": {
            "name": dataset,
            "params": get_params(get_datahandler_class(dataset))
        },
        "train": DEFAULT_TRAIN_CONFIG
    }
    comment = "# Config generated by src.experiments.config.py#generate_config"
    init_var_code = (f"{comment}\n"
                     f"{var_name} = {format_value(config)}")
    print(init_var_code)
    return config


def get_params(init_fn) -> dict:
    # Extracts parameters from the __init__ method with default values if present.
    # Used to provide all the necessary parameters for model/datahandler classes in configs
    params = inspect.signature(init_fn).parameters

    def fill_empy(default_value):
        return default_value if default_value is not inspect._empty else PARAM_TO_FILL

    return {name: fill_empy(param.default) for name, param in params.items() if name != "self"}


def format_value(value, indent_level=0, indent=4, indent_char=' '):
    # To pretty print the config dictionary
    left_indent = indent_char * indent_level
    if isinstance(value, dict):
        items = []
        for k, v in value.items():
            formatted_key = repr(k)
            formatted_value = format_value(v, indent_level=indent_level + indent)
            todo_prefix = "#TODO " if v == PARAM_TO_FILL else ""
            items.append(f"{left_indent}{indent_char * indent}{todo_prefix}{formatted_key}: {formatted_value}")
        return "{\n" + ",\n".join(items) + f"\n{left_indent}}}"
    elif isinstance(value, str) and value == PARAM_TO_FILL:
        return value
    else:
        return repr(value)


# Run to generate a template config
if __name__ == "__main__":
    generate_config("small_unet", "cil")
